
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ABS AND APPEND CAR CDR DEF DEFUN EQ FLOAT GE ID IF INTEGER ISEQ ISNUMBER LE LEN LIST MAX MIN NEQ NOT OR POW ROUND\n        S : '(' expression ')'\n        \n        expression  : '+' factor factor\n                    | '-' factor factor\n                    | '*' factor factor\n                    | '/' factor factor\n                    | POW factor factor\n        \n        expression  : '<' factor factor\n                    | '>' factor factor\n                    | EQ factor factor\n                    | NEQ factor factor\n                    | LE factor factor\n                    | GE factor factor\n                    | ISEQ factor factor\n        \n        expression  : AND factor factor\n                    | OR factor factor\n        \n        expression  : ABS factor\n                    | ROUND factor\n                    | ISNUMBER factor\n                    | NOT factor\n        \n        expression  : DEF ID expression\n        \n        expression  : IF '(' expression ')' '(' expression ')' '(' expression ')'\n        \n        expression  : LIST '(' list_prod ')'\n        \n        expression  : DEFUN '(' name ')' '(' variables ')' '(' fun_body ')'\n        \n        expression : ID '(' list_prod ')'\n        \n        name    : ID\n        \n        variables   : list_prod\n        \n        fun_body    : expression\n        \n        expression  : factor\n        \n        expression  : MIN listy\n                    | MAX listy\n                    | CAR listy\n                    | CDR listy\n                    | LEN listy\n                    | APPEND listy listy\n        \n        listy   : ID\n                | LIST '(' list_prod ')'\n        \n        list_prod   : factor\n                    | list_prod factor\n        \n        factor  : ID\n        \n        factor      : INTEGER\n                    | FLOAT\n                    | '-' INTEGER\n                    | '-' FLOAT\n                    | '(' expression ')'\n        "
    
_lr_action_items = {'(':([0,2,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,68,74,76,77,92,93,95,98,101,102,104,105,106,107,111,112,113,114,115,],[2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,62,63,64,65,-40,-41,3,-39,3,-40,-41,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,98,-44,-42,-43,3,-37,3,3,-38,106,107,3,3,3,3,114,115,3,3,]),'$end':([1,38,],[0,-1,]),'+':([2,3,61,63,106,114,115,],[5,5,5,5,5,5,5,]),'-':([2,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,74,76,77,92,93,95,98,101,105,106,107,111,114,115,],[7,7,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-40,-41,41,-39,41,-40,-41,41,41,41,41,41,41,41,41,41,41,41,41,7,41,7,41,-44,-42,-43,41,-37,41,41,-38,41,7,41,41,7,7,]),'*':([2,3,61,63,106,114,115,],[8,8,8,8,8,8,8,]),'/':([2,3,61,63,106,114,115,],[9,9,9,9,9,9,9,]),'POW':([2,3,61,63,106,114,115,],[10,10,10,10,10,10,10,]),'<':([2,3,61,63,106,114,115,],[11,11,11,11,11,11,11,]),'>':([2,3,61,63,106,114,115,],[12,12,12,12,12,12,12,]),'EQ':([2,3,61,63,106,114,115,],[13,13,13,13,13,13,13,]),'NEQ':([2,3,61,63,106,114,115,],[14,14,14,14,14,14,14,]),'LE':([2,3,61,63,106,114,115,],[15,15,15,15,15,15,15,]),'GE':([2,3,61,63,106,114,115,],[16,16,16,16,16,16,16,]),'ISEQ':([2,3,61,63,106,114,115,],[17,17,17,17,17,17,17,]),'AND':([2,3,61,63,106,114,115,],[18,18,18,18,18,18,18,]),'OR':([2,3,61,63,106,114,115,],[19,19,19,19,19,19,19,]),'ABS':([2,3,61,63,106,114,115,],[20,20,20,20,20,20,20,]),'ROUND':([2,3,61,63,106,114,115,],[21,21,21,21,21,21,21,]),'ISNUMBER':([2,3,61,63,106,114,115,],[22,22,22,22,22,22,22,]),'NOT':([2,3,61,63,106,114,115,],[23,23,23,23,23,23,23,]),'DEF':([2,3,61,63,106,114,115,],[24,24,24,24,24,24,24,]),'IF':([2,3,61,63,106,114,115,],[26,26,26,26,26,26,26,]),'LIST':([2,3,29,30,31,32,33,34,61,63,67,73,106,108,114,115,],[27,27,68,68,68,68,68,68,27,27,-35,68,27,-36,27,27,]),'DEFUN':([2,3,61,63,106,114,115,],[28,28,28,28,28,28,28,]),'ID':([2,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,29,30,31,32,33,34,35,36,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,65,67,73,74,76,77,92,93,95,98,101,105,106,107,108,111,114,115,],[25,25,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,61,67,67,67,67,67,67,-40,-41,40,-39,40,-40,-41,40,40,40,40,40,40,40,40,40,40,40,40,25,40,25,40,97,-35,67,-44,-42,-43,40,-37,40,40,-38,40,25,40,-36,40,25,25,]),'MIN':([2,3,61,63,106,114,115,],[29,29,29,29,29,29,29,]),'MAX':([2,3,61,63,106,114,115,],[30,30,30,30,30,30,30,]),'CAR':([2,3,61,63,106,114,115,],[31,31,31,31,31,31,31,]),'CDR':([2,3,61,63,106,114,115,],[32,32,32,32,32,32,32,]),'LEN':([2,3,61,63,106,114,115,],[33,33,33,33,33,33,33,]),'APPEND':([2,3,61,63,106,114,115,],[34,34,34,34,34,34,34,]),'INTEGER':([2,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,74,76,77,92,93,95,98,101,105,106,107,111,114,115,],[35,35,35,43,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-40,-41,35,-39,76,35,-40,-41,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-44,-42,-43,35,-37,35,35,-38,35,35,35,35,35,35,]),'FLOAT':([2,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,35,36,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,74,76,77,92,93,95,98,101,105,106,107,111,114,115,],[36,36,36,44,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-40,-41,36,-39,77,36,-40,-41,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-44,-42,-43,36,-37,36,36,-38,36,36,36,36,36,36,]),')':([4,6,25,35,36,37,40,43,44,57,58,59,60,66,67,69,70,71,72,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,99,100,101,103,105,108,109,110,111,116,117,118,119,120,],[38,-28,-39,-40,-41,74,-39,-42,-43,-16,-17,-18,-19,-29,-35,-30,-31,-32,-33,-44,-2,-42,-43,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-20,100,-37,102,103,104,-25,-34,-24,-38,-22,108,-36,112,113,-26,119,120,-27,-21,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'S':([0,],[1,]),'expression':([2,3,61,63,106,114,115,],[4,37,91,94,109,116,118,]),'factor':([2,3,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,39,42,45,46,47,48,49,50,51,52,53,54,55,56,61,62,63,64,92,95,98,105,106,107,111,114,115,],[6,6,39,42,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,75,78,79,80,81,82,83,84,85,86,87,88,89,90,6,93,6,93,101,101,93,101,6,93,101,6,6,]),'listy':([29,30,31,32,33,34,73,],[66,69,70,71,72,73,99,]),'list_prod':([62,64,98,107,],[92,95,105,111,]),'name':([65,],[96,]),'variables':([107,],[110,]),'fun_body':([115,],[117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> S","S'",1,None,None,None),
  ('S -> ( expression )','S',3,'p_start','Parser.py',15),
  ('expression -> + factor factor','expression',3,'p_arithmetical_operators','Parser.py',21),
  ('expression -> - factor factor','expression',3,'p_arithmetical_operators','Parser.py',22),
  ('expression -> * factor factor','expression',3,'p_arithmetical_operators','Parser.py',23),
  ('expression -> / factor factor','expression',3,'p_arithmetical_operators','Parser.py',24),
  ('expression -> POW factor factor','expression',3,'p_arithmetical_operators','Parser.py',25),
  ('expression -> < factor factor','expression',3,'p_comparison_operators','Parser.py',31),
  ('expression -> > factor factor','expression',3,'p_comparison_operators','Parser.py',32),
  ('expression -> EQ factor factor','expression',3,'p_comparison_operators','Parser.py',33),
  ('expression -> NEQ factor factor','expression',3,'p_comparison_operators','Parser.py',34),
  ('expression -> LE factor factor','expression',3,'p_comparison_operators','Parser.py',35),
  ('expression -> GE factor factor','expression',3,'p_comparison_operators','Parser.py',36),
  ('expression -> ISEQ factor factor','expression',3,'p_comparison_operators','Parser.py',37),
  ('expression -> AND factor factor','expression',3,'p_boolean_operators','Parser.py',43),
  ('expression -> OR factor factor','expression',3,'p_boolean_operators','Parser.py',44),
  ('expression -> ABS factor','expression',2,'p_single_operators','Parser.py',50),
  ('expression -> ROUND factor','expression',2,'p_single_operators','Parser.py',51),
  ('expression -> ISNUMBER factor','expression',2,'p_single_operators','Parser.py',52),
  ('expression -> NOT factor','expression',2,'p_single_operators','Parser.py',53),
  ('expression -> DEF ID expression','expression',3,'p_define_operators','Parser.py',59),
  ('expression -> IF ( expression ) ( expression ) ( expression )','expression',10,'p_if_operators','Parser.py',65),
  ('expression -> LIST ( list_prod )','expression',4,'p_list_operators','Parser.py',71),
  ('expression -> DEFUN ( name ) ( variables ) ( fun_body )','expression',10,'p_defun_operators','Parser.py',77),
  ('expression -> ID ( list_prod )','expression',4,'p_funcall_operators','Parser.py',83),
  ('name -> ID','name',1,'p_name_expression','Parser.py',89),
  ('variables -> list_prod','variables',1,'p_variables_expression','Parser.py',95),
  ('fun_body -> expression','fun_body',1,'p_fun_body_expression','Parser.py',101),
  ('expression -> factor','expression',1,'p_expression_factor_operators','Parser.py',107),
  ('expression -> MIN listy','expression',2,'p_listop_operators','Parser.py',113),
  ('expression -> MAX listy','expression',2,'p_listop_operators','Parser.py',114),
  ('expression -> CAR listy','expression',2,'p_listop_operators','Parser.py',115),
  ('expression -> CDR listy','expression',2,'p_listop_operators','Parser.py',116),
  ('expression -> LEN listy','expression',2,'p_listop_operators','Parser.py',117),
  ('expression -> APPEND listy listy','expression',3,'p_listop_operators','Parser.py',118),
  ('listy -> ID','listy',1,'p_lister_operators','Parser.py',127),
  ('listy -> LIST ( list_prod )','listy',4,'p_lister_operators','Parser.py',128),
  ('list_prod -> factor','list_prod',1,'p_list_prod_operators','Parser.py',137),
  ('list_prod -> list_prod factor','list_prod',2,'p_list_prod_operators','Parser.py',138),
  ('factor -> ID','factor',1,'p_factor_ID','Parser.py',147),
  ('factor -> INTEGER','factor',1,'p_factor_num','Parser.py',153),
  ('factor -> FLOAT','factor',1,'p_factor_num','Parser.py',154),
  ('factor -> - INTEGER','factor',2,'p_factor_num','Parser.py',155),
  ('factor -> - FLOAT','factor',2,'p_factor_num','Parser.py',156),
  ('factor -> ( expression )','factor',3,'p_factor_num','Parser.py',157),
]
